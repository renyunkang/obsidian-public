<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AboutTheGarden on</title><link>https://ob.tianzhongs.ml/</link><description>Recent content in AboutTheGarden on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://ob.tianzhongs.ml/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://ob.tianzhongs.ml/Arista-%E9%94%90%E6%8D%B7%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/Arista-%E9%94%90%E6%8D%B7%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/</guid><description>#交换机 #arista
参考文档链接：
https://www.osslab.com.tw/wp-content/uploads/2018/03/Arista%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C.pdf https://www.arista.com/zh/um-eos/eos-ethernet-ports 登录：admin → enable → configure → zerotouch disable → write 先关闭zerotouch，否则会出现配置无法保存的情况 显示当前配置 show run</description></item><item><title/><link>https://ob.tianzhongs.ml/arp-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/arp-proxy/</guid><description>#arp #ip
1 2 3 4 sudo bash -c &amp;#39;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&amp;#39; cat /proc/sys/net/ipv4/conf/eth1/proxy_arp sudo sysctl -p 添加默认路由 ip route add 192.</description></item><item><title/><link>https://ob.tianzhongs.ml/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements spine1 ^ysTSUxD3
spine2 ^NLhMxLIF</description></item><item><title/><link>https://ob.tianzhongs.ml/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>#bgp #route-reflector
安装工具 安装网桥工具 apt install -y bridge-utils 安装 bird apt-get install -y bird 修改配置文件 修改网络配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 source /etc/network/interfaces.</description></item><item><title/><link>https://ob.tianzhongs.ml/centos-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/centos-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat /etc/sysconfig/network-scripts/ifcfg-eth0 # Created by cloud-init on instance boot automatically, do not edit.</description></item><item><title/><link>https://ob.tianzhongs.ml/cEOS-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/cEOS-%E9%85%8D%E7%BD%AE/</guid><description>#containerlab #cEOS #交换机
锐捷交换机
enable configure show running-config
vlan 10~12 interface vlan 10 ip address 10.10.10.1 255.255.255.0
interface Ethernet 2 switchport mode trunk switchport trunk native vlan 10 switchport trunk allowed vlan remove 1-4094 Switchport trunk allow vlan add 10,11,12</description></item><item><title/><link>https://ob.tianzhongs.ml/conntrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/conntrack/</guid><description>查看、加载、卸载 nf_conntrack 模块
连接跟踪（conntrack）：原理、应用及 Linux 内核实现 摘要 本文介绍连接跟踪（connection tracking，conntrack，CT）的原理，应用，及其在 Linux 内核中的实现。
代码分析基于内核 4.19。为使行文简洁，所贴代码只保留了核心逻辑，但都给出了代码 所在的源文件，如有需要请查阅。
水平有限，文中不免有错误之处，欢迎指正交流。
1 引言 连接跟踪是许多网络应用的基础。例如，Kubernetes Service、ServiceMesh sidecar、 软件四层负载均衡器 LVS/IPVS、Docker network、OVS、iptables 主机防火墙等等，都依赖 连接跟踪功能。</description></item><item><title/><link>https://ob.tianzhongs.ml/containerlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/containerlab/</guid><description>#containerlab #network #tools
安装 bash -c &amp;ldquo;$(curl -sL https://get.containerlab.dev)&amp;rdquo;
配置 vyos
网络模式
主机网络 容器网络 配置 spine + leaf 安装 docker、kubectl</description></item><item><title/><link>https://ob.tianzhongs.ml/DNS-%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/DNS-%E8%AE%B0%E5%BD%95/</guid><description>#dns
使用青云的公有云，有时主机重启之后对应的dns记录会消失，手动修改 /etc/resolv.conf 后重启会被覆盖，因此可以使用以下方法解决：
使用默认的 resolved 管理 DNS 记录 使用resolvconf 管理 DNS 记录 使用 resolved 修改 /etc/systemd/resolved.</description></item><item><title/><link>https://ob.tianzhongs.ml/ebpf-%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/ebpf-%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/</guid><description>排查工具：ftrace / bcc trace 问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会 | 深入浅出 eBPF</description></item><item><title/><link>https://ob.tianzhongs.ml/fortio-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/fortio-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title/><link>https://ob.tianzhongs.ml/H3C-0519x64/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/H3C-0519x64/</guid><description>#交换机 #h3c
文档链接：
H3C VSR系列虚拟路由器 配置指导-E0518-5W101_三层技术-IP路由配置指导_BGP配置-新华三集团-H3C 连接公网ip 配置基础网络网卡ip 1 2 interface ge3/0 ip address 10.</description></item><item><title/><link>https://ob.tianzhongs.ml/iptables-%E8%BD%AC%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/iptables-%E8%BD%AC%E5%8F%91/</guid><description>#iptables
端口转发 将本机的8080端口转发至其他主机，主机IP：192.168.1.12，目标主机IP和端口：192.168.1.13:8088，规则如下
1 2 3 4 iptables -t nat -A PREROUTING -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.</description></item><item><title/><link>https://ob.tianzhongs.ml/linux-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/linux-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid><description>#静态ip
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 root@node1:~# cat /etc/network/interfaces source /etc/network/interfaces.</description></item><item><title/><link>https://ob.tianzhongs.ml/network-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/network-tools/</guid><description>#nsenter
nsenter -u -n -t $pid bash
nsenter --uts --net --target 3326 --ipc --mount --pid
网卡队列设置为1 + 网卡终端绑定至 CPU0 [Linux 性能调优] 网卡中断与CPU的绑定问题 - 巴蛮子 - 博客园 (cnblogs.</description></item><item><title/><link>https://ob.tianzhongs.ml/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid><description>#iperf #network
Wiki - Linux 效能分析工具: Perf (ncku.edu.tw) 网络测试工具 一、iperf iperf是一个网络性能测试工具。iperf可以测试TCP和UDP带宽质量。iperf可以测量最大TCP带宽，具有多种参数和UDP特性。iperf可以报告带宽，延迟抖动和数据包丢失。利用iperf这一特性，可以用来测试一些网络设备如路由器，防火墙，交换机等的性能。
服务端10.74.148.74启动iperf3，监听端口12345，请求间断时间1s ~# iperf3 -s -p 12345 -i 1 客户端向10.</description></item><item><title/><link>https://ob.tianzhongs.ml/RSS-RPS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/RSS-RPS/</guid><description>单队列没有问题，多队列有问题 ebpf
网卡多队列 多核 多CPU RSS RPS RFS
由于这块内存区域是有限的，如果数据包的速率非常快，单个 CPU 来不及取走这些包，新来的包就会被丢弃。这时候，Receive Side Scaling（RSS，接收端扩展）或者多队列（multiqueue）一类的技术可能就会排上用场。
可以把软中断系统想象成一系列内核线程（每个 CPU 一个），这些线程执行针对不同事件注册的处理函数（handler）。如果你执行过 top 命令，可能会注意到ksoftirqd/0 这个内核线程，其表示这个软中断线程跑在 CPU 0 上。</description></item><item><title/><link>https://ob.tianzhongs.ml/ss-%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/ss-%E5%91%BD%E4%BB%A4/</guid><description>#network #tool
ss 命令用于显示socket状态. 他可以显示PACKET sockets, TCP sockets, UDP sockets, DCCP sockets, RAW sockets, Unix domain sockets等等统计. 它比其他工具展示等多tcp和state信息. 它是一个非常实用、快速、有效的跟踪IP连接和sockets的新工具.
功能类似：netstat</description></item><item><title/><link>https://ob.tianzhongs.ml/tc-tbf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/tc-tbf/</guid><description>tbf - token bucket Filter 令牌桶过滤器
tbf sfq 无类算法 流量控制 TBF 队列控制 SFQ 随机公平队列
分类算法：PRIO/CBQ/HTB 对多种数据流区别对待
PRIO：分类优先算法 (从左至右优先发包), 队列规定并不进行整形，它仅仅根据配置的过滤器把流量进一步细分 CBQ：工作机制是确认链路的闲置时间足够长，以达到降低链路实际带宽的目的 HTB：分层的令牌桶一个分类的令牌桶过滤器 linux 流量控制：</description></item><item><title/><link>https://ob.tianzhongs.ml/tcpdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/tcpdump/</guid><description>tcpdump -i any -w mycap.pacp</description></item><item><title/><link>https://ob.tianzhongs.ml/termshark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/termshark/</guid><description>#wireshark #tcpdump #termshark
安装： Releases · gcla/termshark (github.com)</description></item><item><title/><link>https://ob.tianzhongs.ml/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/test/</guid><description>测试 这是一个测试文档
ping包：apt-get install inetutils-ping ifconfig/netstat：apt-get install net-tools ip 命令：apt-get install iproute2 抓包：sudo apt-get install wireshark + sudo usermod -a -G wireshark $USER</description></item><item><title/><link>https://ob.tianzhongs.ml/vlan-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/vlan-%E9%85%8D%E7%BD%AE/</guid><description>#vlan #vyos
[[hybridnet 网络插件]]
1 2 3 4 5 6 7 set interfaces ethernet eth1 vif 100 description &amp;#39;VLAN 100&amp;#39; set interfaces ethernet eth1 vif 100 address &amp;#39;192.</description></item><item><title/><link>https://ob.tianzhongs.ml/vyos-OSPF-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/vyos-OSPF-%E9%85%8D%E7%BD%AE/</guid><description>#vyos #路由器
1 2 3 4 5 6 set interfaces loopback lo address 9.9.9.9/32 set protocols ospf parameters router-id 8.</description></item><item><title/><link>https://ob.tianzhongs.ml/wireshark-%E6%8A%93%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/wireshark-%E6%8A%93%E5%8C%85/</guid><description>#wireshark #抓包
wireshark 抓远程 ubuntu 的包 安装 rpcapd rpcapd 是一个为 Windows 版本的Wireshark协议分析器提供远程流量捕获的守护进程。它随Windows 的 WinPcap 网络捕获库一起提供，之前 Linux 中的没有 libpcap ,后来添加了。 使用 rpcapd-linux 使用 the-tcpdump-group/libpcap 【推荐】没有大的报错问题 1 2 3 4 5 6 apt-get build-dep libpcap -y git clone https://github.</description></item><item><title/><link>https://ob.tianzhongs.ml/wireshark-%E6%8A%93%E5%8C%85%E8%BF%87%E6%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/wireshark-%E6%8A%93%E5%8C%85%E8%BF%87%E6%BB%A4/</guid><description>#wireshark
功能 表达式 筛选特定 ip ip.addr == xxx</description></item><item><title/><link>https://ob.tianzhongs.ml/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9B%B8%E5%85%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9B%B8%E5%85%B3/</guid><description>#containerlab #交换机
Nokia SR Linux
1 2 3 4 5 # access CLI docker exec -it &amp;lt;name&amp;gt; sr_cli # access bash docker exec -it &amp;lt;name&amp;gt; bash Arista cEOS</description></item><item><title/><link>https://ob.tianzhongs.ml/%E4%BD%BF%E7%94%A8-containerlab-+-kind-%E6%90%AD%E5%BB%BA-calico-tor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E4%BD%BF%E7%94%A8-containerlab-+-kind-%E6%90%AD%E5%BB%BA-calico-tor/</guid><description>#containerlab #calico #kind #bgp
1. 使用 kind 创建 node 节点 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 kind:Clustername:clusterapiVersion:kind.</description></item><item><title/><link>https://ob.tianzhongs.ml/%E5%86%85%E6%A0%B8%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E5%86%85%E6%A0%B8%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</guid><description/></item><item><title/><link>https://ob.tianzhongs.ml/%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/</guid><description>#tool #linux #network
工具包 [[工具包 - 下载命令]] ebpf 相关 [[ebpf 排查工具]] iptables 相关 [[iptables 转发]] conntrack/netstats/ss/lsof [[conntrack]] 网卡多队列、中断绑定 [[网卡多队列 + 中断绑定]]</description></item><item><title/><link>https://ob.tianzhongs.ml/%E6%90%AD%E5%BB%BA%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E6%90%AD%E5%BB%BA%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD/</guid><description>Quartz 模板 obsidian export 插件？ 将 obsidian value 转为 markdown，没有 title 的添加 title obsidian-hugo 插件 利用 Github Actions github page or vercel 步骤：</description></item><item><title/><link>https://ob.tianzhongs.ml/%E6%9C%AA%E5%91%BD%E5%90%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E6%9C%AA%E5%91%BD%E5%90%8D/</guid><description>#loadbalance
| 名称 | 解释 | 层级|= |&amp;ndash;|&amp;ndash;|&amp;ndash;| |DLB | DNS 负载均衡 | 七层 | | ALB | Application 负载均衡 | 七层 | | NLB | Network 负载均衡 | 四层 |</description></item><item><title/><link>https://ob.tianzhongs.ml/%E7%BB%84%E7%BD%91.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E7%BB%84%E7%BD%91.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 45.120.216.46 ^ZNmnY1tc
192.168.0.1 ^8cHK23kk</description></item><item><title/><link>https://ob.tianzhongs.ml/%E7%BD%91%E5%8D%A1-vlan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E7%BD%91%E5%8D%A1-vlan/</guid><description>#vlan #network
添加 vlan 子接口 使用 ip 命令 ip link add link enp125s0f0 name enp125s0f0.100 type vlan id 100 使用 vconfig 命令 相关模块 lsmod |grep -i 8021q 相关工具包 apt-get install vlan or yum install vconfig modprobe 8021q 添加 vlan vconfig add enp8s0f1 100 在enp8s0f1接口上配置两个VLAN vconfig set_flag enp8s0f1.</description></item><item><title/><link>https://ob.tianzhongs.ml/%E7%BD%91%E5%8D%A1%E5%A4%9A%E9%98%9F%E5%88%97-+-%E4%B8%AD%E6%96%AD%E7%BB%91%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E7%BD%91%E5%8D%A1%E5%A4%9A%E9%98%9F%E5%88%97-+-%E4%B8%AD%E6%96%AD%E7%BB%91%E5%AE%9A/</guid><description>#网卡多队列 #network #irqbalance
单CPU处理网络IO存在瓶颈, 目前经常使用网卡多队列提高性能.
通常情况下, 每张网卡有一个队列(queue), 所有收到的包从这个队列入, 内核从这个队列里取数据处理. 该队列其实是ring buffer(环形队列), 内核如果取数据不及时, 则会存在丢包的情况.
一个CPU处理一个队列的数据, 这个叫中断. 默认是cpu0(第一个CPU)处理. 一旦流量特别大, 这个CPU负载很高, 性能存在瓶颈. 所以网卡开发了多队列功能, 即一个网卡有多个队列, 收到的包根据TCP四元组信息hash后放入其中一个队列, 后面该链接的所有包都放入该队列.</description></item><item><title/><link>https://ob.tianzhongs.ml/%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8%E7%9A%84%E5%8F%8D%E5%B0%84%E8%A7%84%E5%88%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8%E7%9A%84%E5%8F%8D%E5%B0%84%E8%A7%84%E5%88%99/</guid><description>#bgp #route-reflector
路由反射器的反射规则：
1、反射器接收到EBGP邻居通告的BGP路由时候：当路由反射器接收到来自EBGP邻居通告的BGP路由，会把此路由同时通告给同一cluster内的client邻居，也通告给cluster之外的其他IBGP邻居。而路由中携带的Cluster list和Originator属性只发送给cluster内的client邻居。
2、反射器接收到cluster内的IBGP邻居发送来的路由时候：当路由反射器接收到同一cluster内的IBGP邻居发送来的BGP路由时候，反射器把该路由通告给cluster内其他所有client邻居，也通告给cluster外的其他IBGP邻居，这个通告的路由包括了Originator 属性和修改后的Cluster ID属性。如果该反射器存在EBGP邻居的话，反射器同时把该路由通告给所有的EBGP邻居，但不携带任何反射器相关属性。
3、反射器接收到cluster外的其他IBGP邻居发送的BGP路由时候：当反射器接收到cluster以外的其他IBGP邻居发送的路由时候，反射器会把该路由通告给自己cluster内所有的client邻居，添加合适的属性。如果该RR存在EBGP邻居的话，则RR同时也把该路由通告给自己所有的EBGP邻居，但不携带反射器相关属性。</description></item><item><title/><link>https://ob.tianzhongs.ml/%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ob.tianzhongs.ml/%E9%97%AE%E9%A2%98/</guid><description>为什么引入网卡多队列。引入网卡多队列解决了什么问题，带来了什么其他问题 队列绑核 整个收/发包的流程是什么样的 1.网卡多队列 &amp;ndash; 收包多队列 +发包多队列 通常情况下, 每张网卡有一个队列(queue), 所有收到的包从这个队列入, 内核从这个队列里取数据处理. 该队列其实是ring buffer(环形队列), 内核如果取数据不及时, 则会存在丢包的情况.
一个CPU处理一个队列的数据, 这个叫中断. 默认是cpu0(第一个CPU)处理. 一旦流量特别大, 这个CPU负载很高, 性能存在瓶颈.</description></item></channel></rss>