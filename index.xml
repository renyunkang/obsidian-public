<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AboutTheGarden on</title><link>https://renyunkang.tk/</link><description>Recent content in AboutTheGarden on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://renyunkang.tk/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://renyunkang.tk/1.-%E5%8A%9F%E8%83%BD%E7%82%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/1.-%E5%8A%9F%E8%83%BD%E7%82%B9/</guid><description>#cni #kube-ovn #集成
kubeovn 基于 ovn/ovs，将 SDN 的能力和云原生结合，提供了丰富的网络能力。kubeovn 支持 overlay 模式、underlay 模式以及两者混合部署的模式。
kubeovn 功能点：
基础的 ipam + networkPolicy qos 带宽限制 双栈支持 underlay 适配 - 物理组网 overlay 功能 - 虚拟组网 分布式网关、集中式网关 eip + snat 配置 自定义 vpc loadbalancer service 默认vpc kube-ovn监控 + cilium 集成与网络流量观测 流量镜像 多集群互联</description></item><item><title/><link>https://renyunkang.tk/2.-%E5%85%AC%E5%85%B1%E5%8A%9F%E8%83%BD%E7%82%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/2.-%E5%85%AC%E5%85%B1%E5%8A%9F%E8%83%BD%E7%82%B9/</guid><description>基于 calico 与 kube-ovn 在功能上以及模式上有很大不同，因此 ui 的管理无法做到统一。
ipam 绑定 namespace 支持将 subnet (同calico ippool) 绑定到 namespace ippool 绑定到企业空间
ip 分配 创建工作负载时指定分配方式</description></item><item><title/><link>https://renyunkang.tk/3.-underlay-%E7%89%A9%E7%90%86%E7%BB%84%E7%BD%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/3.-underlay-%E7%89%A9%E7%90%86%E7%BB%84%E7%BD%91/</guid><description>underlay 适配 kube-ovn 支持 overlay 与 underlay 模式的混合部署，并支持通过 CRD 动态创建 underlay模式，因此对于有 underlay 需求的客户，可以在安装完 ks 成之后进行动态配置 在创建/修改为 underlay模式的提示信息：需要预先在底层网络设备配置对应的网关、Vlan 和安全策略等配置 界面创建流程：
创建底层的 provider-networks 创建子网，填写 vlan id，绑定 provider-network(后端自动创建vlan) 子网支持设置是否为默认，因此在明确自己操作风险的情况完全切换为 underlay，修改并删除 overlay 的默认子网 ovn-default，创建并设置一个默认 underlay 子网 provider-networks 资源 **ProviderNetwork 资源名称的长度不得超过 12 ** VPC 网关无法与 underlay 使用同一节点的同一张网卡</description></item><item><title/><link>https://renyunkang.tk/4.-overlay-%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/4.-overlay-%E5%8A%9F%E8%83%BD/</guid><description>网关类型 仅在默认 vpc 下支持，子网管理
允许设置网关类型：
分布式网关：默认类型网关，每个 node 会作为当前 node 上 pod 访问外部网络的网关。数据包会通过本机的 ovn0 网卡流入主机网络栈，再根据主机的路由规则进行出网。 集中式网关：如果希望子网内流量访问外网使用固定的 IP，以便审计和白名单等安全操作，可以在子网中设置网关类型为集中式网关。 在集中式网关模式下，Pod 访问外网的数据包会首先被路由到特定节点的 ovn0 网卡，再通过主机的路由规则进行出网。 集中式网关下允许设置作为网关的节点：</description></item><item><title/><link>https://renyunkang.tk/5.-overlay%E8%87%AA%E5%AE%9A%E4%B9%89VPC-%E9%80%BB%E8%BE%91%E7%BB%84%E7%BD%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/5.-overlay%E8%87%AA%E5%AE%9A%E4%B9%89VPC-%E9%80%BB%E8%BE%91%E7%BB%84%E7%BD%91/</guid><description>使用自定义 VPC Kube-OVN 支持多租户隔离级别的 VPC 网络。不同 VPC 网络相互独立，可以分别配置 Subnet 网段、路由策略、安全策略、出网网关、EIP 等配置。
说明 VPC 主要用于有多租户网络强隔离的场景。部分 Kubernetes 网络功能在多租户网络下存在冲突。 例如节点和 Pod 互访，NodePort 功能，基于网络访问的健康检查和 DNS 能力在多租户网络场景暂不支持。 为了方便常见 Kubernetes 的使用场景，Kube-OVN 默认 VPC 做了特殊设计，该 VPC 下的 Subnet 可以满足 Kubernetes 规范。 常见隔离需求可通过默认 VPC 下的网络策略和子网 ACL 实现 用户自定义 VPC 支持静态路由、EIP、NAT 网关等功能。 在使用自定义 VPC 前请明确是否需要 VPC 级别的隔离，并了解自定义 VPC 下的限制。 VPC 出网网关 使用自定义 vpc 并配置出口网关时，需要使用 multus-cni，因此必须安装 [[multus-cni]] 自定义 VPC 下的子网不支持默认 VPC 下的分布式网关和集中式网关。 自定义 VPC 内容器访问外部网络需要通过 VPC 网关，VPC 网关可以打通物理网络和租户网络，并提供浮动 IP、SNAT、DNAT 功能。</description></item><item><title/><link>https://renyunkang.tk/Arista-%E9%94%90%E6%8D%B7%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Arista-%E9%94%90%E6%8D%B7%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE/</guid><description>#交换机 #arista
参考文档链接：
https://www.osslab.com.tw/wp-content/uploads/2018/03/Arista%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C.pdf https://www.arista.com/zh/um-eos/eos-ethernet-ports 登录：admin → enable → configure → zerotouch disable → write 先关闭zerotouch，否则会出现配置无法保存的情况 显示当前配置 show run</description></item><item><title/><link>https://renyunkang.tk/arp-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/arp-proxy/</guid><description>#arp #ip
1 2 3 4 sudo bash -c &amp;#39;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&amp;#39; cat /proc/sys/net/ipv4/conf/eth1/proxy_arp sudo sysctl -p 添加默认路由 ip route add 192.</description></item><item><title/><link>https://renyunkang.tk/BGP-%E6%8A%A5%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/BGP-%E6%8A%A5%E6%96%87/</guid><description>#bgp #bird bird文档 labs / BIRD Internet Routing Daemon · GitLab (nic.cz)
bgp 报文类型
type 报文类型 用途 1 Open 建立 BGP 连接 2 Update 用于通告路由 3 Notification 用于处理 BGP 进程中的各种错误 4 Keepalive 用于保持 BGP 连接 5 Refresh 用于动态的请求 BGP 路由发布者重新发布 Update 报文，进行路由更新 配置 tor 为 Route Reflector 以及选取集群中一个节点作为 Route Reflector 的区别 RR是一种用于提高BGP网络中路由传播效率的技术。在 BGP 网络中，每个节点通常需要向其邻居节点发送完整的路由表，这可能会导致网络带宽消耗和延迟增加。通过使用 RR，节点可以将路由信息发送到 RR 节点，RR 节点然后将其转发给其他节点，从而减少了网络流量和节点负担。</description></item><item><title/><link>https://renyunkang.tk/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements spine1 ^ysTSUxD3
spine2 ^NLhMxLIF</description></item><item><title/><link>https://renyunkang.tk/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/BGP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>#bgp #route-reflector
安装工具 安装网桥工具 apt install -y bridge-utils 安装 bird apt-get install -y bird 修改配置文件 修改网络配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 source /etc/network/interfaces.</description></item><item><title/><link>https://renyunkang.tk/BIRD-%E6%96%87%E6%A1%A3-+-%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/BIRD-%E6%96%87%E6%A1%A3-+-%E9%A1%B9%E7%9B%AE/</guid><description>#bird
文档： The BIRD Internet Routing Daemon Project (network.cz) 项目地址： Files · master · labs / BIRD Internet Routing Daemon · GitLab (nic.</description></item><item><title/><link>https://renyunkang.tk/build-record/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/build-record/</guid><description>#go #record
build 工具包 go 安装包下载地址：
wget https://studygolang.com/dl/golang/go1.17.6.linux-amd64.tar.gz 1 2 3 4 5 6 7 8 # 配置环境 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/profile.</description></item><item><title/><link>https://renyunkang.tk/calico-ebpf-dataplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/calico-ebpf-dataplane/</guid><description>#calico #ebpf
介绍calico ebpf Introducing the Calico eBPF dataplane (tigera.io)
开启 calico ebpf Enable the eBPF dataplane (tigera.io)</description></item><item><title/><link>https://renyunkang.tk/Calico-Full-Mesh-BGP-%E6%8A%A5%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Calico-Full-Mesh-BGP-%E6%8A%A5%E6%96%87/</guid><description>#bgp #calico-bgp
集群环境 节点 ip 地址 角色 node1 172.30.10.2 master+worker node2 172.</description></item><item><title/><link>https://renyunkang.tk/calico-ipam-%E8%BF%87%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/calico-ipam-%E8%BF%87%E7%A8%8B/</guid><description>calico ipam 相关 CRD 资源 资源名 介绍 ippool 用于 ipam 分配的 ip 池 ipamblock block 中 ip 分配信息等 blockaffinities 由 ippool 分割的细粒度的 ip 块以及 block 与节点的亲和性绑定关系 ipamconfigs 用于配置 ipam 相关参数 ipamhandles 用于保存 pod 与 block 关系 ippool 表示 IP 地址的集合，Calico 从中分配 IP给 pod。 示例 yaml：</description></item><item><title/><link>https://renyunkang.tk/calico-iperf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/calico-iperf/</guid><description>calico 内部 node - node pod - pod （自身） pod - node（同） pod - node iperf3工具每100ms发一轮报文，每次在2、3ms内瞬间发完，iperf工具则均匀的发送报文，接口限速使用 iperf3 作为测试工具需要调整令牌桶参数以达到最佳效果。</description></item><item><title/><link>https://renyunkang.tk/calico-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/calico-metrics/</guid><description>#calico-metris
Prometheus statistics (tigera.io)
指标 描述 felix_active_local_endpoints 该主机上活动的 endpoints 数量 felix_active_local_policies 该主机上活跃的策略数 felix_active_local_selectors 该主机上额活跃 selectors 数 felix_calc_graph_output_events calculation graph 产生的事件数 felix_calc_graph_update_time_seconds 为每个 datastore更新 calculation graph 调用 OnUpdate的秒 felix_calc_graph_updates_processed calculation graph 处理的 datestore 更新次数 felix_cluster_num_host_endpoints 集群层面 host endpoints 的总数 felix_cluster_num_hosts 集群中的 Calico hosts 总数 felix_cluster_num_workload_endpoints 集群层负载 endpoints 总数 felix_exec_time_micros fork/exec 子进程花费的时间 felix_int_dataplane_addr_msg_batch_size 批处理的接口地址报文数。 较高的值表示我们正在做更多的批处理以试图跟上 felix_int_dataplane_apply_time_seconds 应用数据面更新花费的时间 felix_int_dataplane_failures 数据面更新失败以及重试次数 felix_int_dataplane_iface_msg_batch_size 批处理的接口状态消息数。 较高的值表示我们正在做更多的批处理以试图跟上 felix_int_dataplane_messages 按照类型分类的消息数 felix_int_dataplane_msg_batch_size 批处理的消息数。 较高的值表示我们正在做更多的批处理以试图跟上 felix_ipset_calls ipset 命令执行数 felix_ipset_errors ipset 命令失败数 felix_ipset_lines_executed ipset 执行操作数 felix_ipsets_calico active Calico IP sets 数量 felix_ipsets_total active IP sets 总数 felix_iptables_chains active iptables chains 数量 felix_iptables_lines_executed iptables 规则执行更新数 felix_iptables_restore_calls iptables-restore 调用次数 felix_iptables_restore_errors iptables-restore 错误数 felix_iptables_rules active iptables 规则数 felix_iptables_save_calls iptables-save 调用次数 felix_iptables_save_errors iptables-save 错误数 felix_resync_state 当前 datastore 状态 felix_resyncs_started felix 开始重新同步datastore的次数 felix_route_table_list_seconds 在同步期间列出所有接口所花费的时间 felix_route_table_per_iface_sync_seconds 同步每个接口所花费的时间 felix_log_errors 错误日志数 felix_logs_dropped 由于输出流被阻塞而丢弃的日志数 使用 prometheus 收集监控：[[监控 - monitor]] 使用可视化查看：[[grafana 可视化]]</description></item><item><title/><link>https://renyunkang.tk/Calico-TOR-BGP-%E6%8A%A5%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Calico-TOR-BGP-%E6%8A%A5%E6%96%87/</guid><description>#bgp #calico-bgp #calico
集群环境 节点 ip 地址 角色 node1 10.1.5.11 master+worker node2 10.</description></item><item><title/><link>https://renyunkang.tk/calico-%E8%BF%90%E8%90%A5%E6%96%87%E6%A1%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/calico-%E8%BF%90%E8%90%A5%E6%96%87%E6%A1%A3/</guid><description>新增 or 扩容 ippool 固定 ip ns 与 subnet 绑定 calico 限速 calico 的 tunnel 地址会自动分配 迁移 ippool 的容量准备 blockSize 应该如何取值 kubesphere 集成了cni 的 ippool 和 网络策略，ks 在 cni 基础之上封装了一层，用于屏蔽不同 cni 底层实现的，现阶段版本中底层中主要使用了 calico。</description></item><item><title/><link>https://renyunkang.tk/calico-%E8%BF%90%E8%90%A5%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/calico-%E8%BF%90%E8%90%A5%E9%97%AE%E9%A2%98/</guid><description>#calico #issue
配置etcd calico 支持两种数据存储，一种是使用 kubernetes api 接口来对其 etcd 进行读写操作；一种直接连接 etcd 进行读写操作，同时 calico 支持配置 etcd tls 进行数据加密实现安全的存储，对于 etcd 相关的证书生成以及更新维护不在 calico 管理范围之内。 docs/generate-self-signed-certificates.</description></item><item><title/><link>https://renyunkang.tk/centos-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/centos-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat /etc/sysconfig/network-scripts/ifcfg-eth0 # Created by cloud-init on instance boot automatically, do not edit.</description></item><item><title/><link>https://renyunkang.tk/cEOS-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/cEOS-%E9%85%8D%E7%BD%AE/</guid><description>#containerlab #cEOS #交换机
锐捷交换机
enable configure show running-config
vlan 10~12 interface vlan 10 ip address 10.10.10.1 255.255.255.0
interface Ethernet 2 switchport mode trunk switchport trunk native vlan 10 switchport trunk allowed vlan remove 1-4094 Switchport trunk allow vlan add 10,11,12</description></item><item><title/><link>https://renyunkang.tk/confd-%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/confd-%E7%BB%84%E4%BB%B6/</guid><description>开源的、轻量级的配置管理工具。监控Calico数据存储对BGP配置和全局默认的日志变更，如AS号、日志级别和IPAM信息。
Confd根据存储中的数据更新，动态生成BIRD配置文件。当配置文件发生变化时，confd会触发BIRD加载新的文件。
function apply_communities (){{{- $prefix_advertisements_key := &amp;#34;&amp;#34;}}{{- $node_prefix_advertisements_key := printf &amp;#34;/host/%s/prefix_advertisements/ip_v4&amp;#34; (getenv &amp;#34;NODENAME&amp;#34;)}}{{- if exists $node_prefix_advertisements_key}}{{- $prefix_advertisements_key = $node_prefix_advertisements_key}}{{- else if exists &amp;#34;/global/prefix_advertisements/ip_v4&amp;#34;}}{{- $prefix_advertisements_key = &amp;#34;/global/prefix_advertisements/ip_v4&amp;#34;}}{{- end}}{{- if ne &amp;#34;&amp;#34; $prefix_advertisements_key}}{{- range gets $prefix_advertisements_key}}{{- $arr:= jsonArray .</description></item><item><title/><link>https://renyunkang.tk/conntrack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/conntrack/</guid><description>查看、加载、卸载 nf_conntrack 模块
连接跟踪（conntrack）：原理、应用及 Linux 内核实现 摘要 本文介绍连接跟踪（connection tracking，conntrack，CT）的原理，应用，及其在 Linux 内核中的实现。
代码分析基于内核 4.19。为使行文简洁，所贴代码只保留了核心逻辑，但都给出了代码 所在的源文件，如有需要请查阅。
水平有限，文中不免有错误之处，欢迎指正交流。
1 引言 连接跟踪是许多网络应用的基础。例如，Kubernetes Service、ServiceMesh sidecar、 软件四层负载均衡器 LVS/IPVS、Docker network、OVS、iptables 主机防火墙等等，都依赖 连接跟踪功能。</description></item><item><title/><link>https://renyunkang.tk/containerlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/containerlab/</guid><description>#containerlab #network #tools
安装 bash -c &amp;ldquo;$(curl -sL https://get.containerlab.dev)&amp;rdquo;
配置 vyos
网络模式
主机网络 容器网络 配置 spine + leaf 安装 docker、kubectl</description></item><item><title/><link>https://renyunkang.tk/coredns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/coredns/</guid><description>#coredns
coredns &amp;ldquo;no nameservers found&amp;rdquo; error coredns CrashLoopBackOff
1 kubectl edit configmap coredns -n kube-system 删除以下部分或者修改为正确的 dns</description></item><item><title/><link>https://renyunkang.tk/CVE-%E6%BC%8F%E6%B4%9E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/CVE-%E6%BC%8F%E6%B4%9E/</guid><description>#cve
编译 pcre - 更换 高版本 动态库 不生效
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 FROM --platform=linux/arm64 calico/node:v3.</description></item><item><title/><link>https://renyunkang.tk/CVE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/CVE/</guid><description> node pod2daemonset-flexvol busybox1.35.0: 2
zlibv1.2.12: 1
CVE-2022-30065
CVE-2022-28391
CVE-2022-37434</description></item><item><title/><link>https://renyunkang.tk/Design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Design/</guid><description>#network-policy
支持 network policy 的插件：calico，kube-ovn，clinum等
网络隔离：企业空间的网络隔离 + 项目级别的网络隔离
抽象了 NamespaceNetworkPolicies 资源相比 NetworkPolicy 删掉了 podSelector 增加了 serviceSelector，在项目下创建隔离白名单会创建 nsnp 并转化为 k8s 的 networkPolicy，而企业空间的网络隔离会直接转化为 k8s 的 networkpolicy</description></item><item><title/><link>https://renyunkang.tk/DNS-%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/DNS-%E8%AE%B0%E5%BD%95/</guid><description>#dns
使用青云的公有云，有时主机重启之后对应的dns记录会消失，手动修改 /etc/resolv.conf 后重启会被覆盖，因此可以使用以下方法解决：
使用默认的 resolved 管理 DNS 记录 使用resolvconf 管理 DNS 记录 使用 resolved 修改 /etc/systemd/resolved.</description></item><item><title/><link>https://renyunkang.tk/Drawing-2022-11-02-11.22.56.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Drawing-2022-11-02-11.22.56.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements openelb-manager ^PjYZ3Jtb
openelb-console ^9PLzVac0</description></item><item><title/><link>https://renyunkang.tk/Drawing-2022-11-07-11.21.56.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Drawing-2022-11-07-11.21.56.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements KS.IPPool ^G1OAYalQ
calico ippool ^ObxGOAkC</description></item><item><title/><link>https://renyunkang.tk/Drawing-2023-02-16-17.22.15.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Drawing-2023-02-16-17.22.15.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements A9: 15.255.83.26 65103.29844 A10: 15.</description></item><item><title/><link>https://renyunkang.tk/ebpf-%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/ebpf-%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/</guid><description>排查工具：ftrace / bcc trace 问题排查利器：Linux 原生跟踪工具 Ftrace 必知必会 | 深入浅出 eBPF</description></item><item><title/><link>https://renyunkang.tk/English/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/English/</guid><description>IMO-in my opinion 我认为 IMO, it&amp;rsquo;s doesn&amp;rsquo;t good.</description></item><item><title/><link>https://renyunkang.tk/felix-%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/felix-%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid><description>#calico-felix #calico-ebpf
入口处：felix/dataplane/linux/int_dataplane.go 的 NewIntDataplaneDriver() 函数，进行dataplane的初始化 首先会判断是否开启了BPF，如果是开启状态，则进行以下操作： 1）注册 map manager，该manager的作用是负责管理ebpf的map（map用于userspace和kernel之间进行数据的共享） 2）注册endpoint manager，该manager的作用是负责各种ep的管理，包括host、workload等 3）创建各种map，比如nat的frontendMap、backendMap、routeMap、conntrackMap等 4）开启kube-proxy，注意此kube-proxy并非kubernetes的kube-proxy，而是proxy的一个封装，负责和kubernetes通信，维护各种map中的信息 5）若BPFConnTimeEnabled开启，则安装connect_time_loadbalancer，即加载相关的eBPF程序 6）启动dataplane（这部分暂不涉及connect_time_loadbalancer，本文暂不分析）
calico 全部的组件以及其进程树详见：[[组件]] felix 组件 [[felix]]</description></item><item><title/><link>https://renyunkang.tk/felix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/felix/</guid><description>felix 主要的工作组件：syncer, CalcGraph, dataplane
Syncer 协程负责监听 datastore 中的更新，并将更新的内容通过 channel 发送给 Validator 协程。Validator 完成校验后，将其发送给 Calc graph 协程。Calc graph 完成计算后，发送给dataplane协程。最后dataplane完成数据平面处理。 syncer, calicoctl 可以直接向 datastore 增删改查一系列 Resource。syncer 同步且监听这些Resource，当资源变动时，通过回调onUpdate 通知下游组件（比如CalcGraph）。 CalcGraph, syncer 传递的 datastore 数据通常不能直接使用，需要CalcGraph 做一些计算和归并再交给dataplane dataplane 负责对 node 做出处理。 dataplane 分为本地和远程两种形态，如果是本地运行，则通过channel 直接传输 proto model，如果是dataplane 远程独立运行，则执行grpc 调用； github.</description></item><item><title/><link>https://renyunkang.tk/Flannel-%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Flannel-%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/</guid><description>#flannel #cni</description></item><item><title/><link>https://renyunkang.tk/fortio-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/fortio-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid><description/></item><item><title/><link>https://renyunkang.tk/git-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/git-proxy/</guid><description>#git #proxy
git 设置和取消代理 (github.com)
windows git 设置代理 简单方法： 设置环境变量
http_proxy: 127.0.0.1:1080 https_proxy: 127.0.0.1:1080 windows git 相关的配置文件：C:\Users\renyunkang\.gitconfig</description></item><item><title/><link>https://renyunkang.tk/git-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/git-sync/</guid><description>#git #sync
由于新的需求在仓库(upstream)新建了一个分支new，然而我fork的origin(远程个人仓库，非电脑中的本地仓库)中没有这个分支，我需要在new分支上进行开发并与upstream追踪，如何将新分支new插入origin中了，步骤如下: 1：创建并切换到新的上游分支的本地版本 git checkout -b new upstream/new； 2：将新的分支推送到个人远程仓库 git push -u origin new,-u跟踪指定的远程；
同步其他提交
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 git remote add upstream https://github.</description></item><item><title/><link>https://renyunkang.tk/git-%E6%96%87%E6%A1%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/git-%E6%96%87%E6%A1%A3/</guid><description>#git
**feat：**提交新功能 fix：修复了bug docs：只修改了文档 style：调整代码格式，未修改代码逻辑（比如修改空格、格式化、缺少分号等） refactor：代码重构，既没修复bug也没有添加新功能 perf：性能优化，提高性能的代码更改 test：添加或修改代码测试 chore：对构建流程或辅助工具和依赖库（如文档生成等）的更改</description></item><item><title/><link>https://renyunkang.tk/grafana-%E5%8F%AF%E8%A7%86%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/grafana-%E5%8F%AF%E8%A7%86%E5%8C%96/</guid><description>#calico #grafana
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 kubectl apply -f - &amp;lt;&amp;lt;EOF apiVersion: v1 kind: ConfigMap metadata: name: grafana-config namespace: calico-monitoring data: prometheus.</description></item><item><title/><link>https://renyunkang.tk/H3C-0519x64/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/H3C-0519x64/</guid><description>#交换机 #h3c
文档链接：
H3C VSR系列虚拟路由器 配置指导-E0518-5W101_三层技术-IP路由配置指导_BGP配置-新华三集团-H3C 连接公网ip 配置基础网络网卡ip 1 2 interface ge3/0 ip address 10.</description></item><item><title/><link>https://renyunkang.tk/helm-Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/helm-Tools/</guid><description>#helm
1. 官网地址 https://helm.sh/
2. 在ubuntu上安装 1 2 3 4 5 curl https://baltocdn.com/helm/signing.asc | sudo apt-key add - sudo apt-get install apt-transport-https --yes echo &amp;#34;deb https://baltocdn.</description></item><item><title/><link>https://renyunkang.tk/hybirdnet-%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/hybirdnet-%E4%BD%BF%E7%94%A8/</guid><description>#hybridnet #cni
[[hybirdnet.svg]] 给节点打 label
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 apiVersion:networking.</description></item><item><title/><link>https://renyunkang.tk/hybridnet-%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/hybridnet-%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/</guid><description>#cni #hybridnet
[[vlan 配置]]
一键安装 1 2 3 helm repo add hybridnet https://alibaba.github.io/hybridnet/ helm repo update helm install hybridnet hybridnet/hybridnet -n kube-system --set init.</description></item><item><title/><link>https://renyunkang.tk/hybridnet-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E8%A7%A3%E9%87%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/hybridnet-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E8%A7%A3%E9%87%8A/</guid><description>#cni #hybridnet
[[hybridnet 网络插件]]
资源 解释 networks 网络域 subnets 节点可用的网段资源 ipinstances ip 分配情况（只读） nodeinfoes 节点情况 vxlan 信息 每个 Network 至少需要有一个 Subnet 才能真正被使用 目前还不支持一个节点属于多个 Underlay Network，但是支持一个节点属于多个不同 type（比如 Overlay、Underlay）的 Network network network.</description></item><item><title/><link>https://renyunkang.tk/hybridnet.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/hybridnet.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements leaf1 ^sDROrzpl
server1 ^eqxCtLQ4</description></item><item><title/><link>https://renyunkang.tk/icmp-tcp-dns-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/icmp-tcp-dns-%E9%85%8D%E7%BD%AE/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 ---apiVersion:v1kind:Namespacemetadata:name:monitoring-systemlabels:app:monitoring---apiVersion:v1kind:ConfigMapmetadata:name:blackbox-confignamespace:monitoring-systemdata:blackbox.</description></item><item><title/><link>https://renyunkang.tk/images-repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/images-repository/</guid><description>#docker
Moby = open source development Docker CE = free product release based on Moby Docker EE = commercial product release based on Docker CE.</description></item><item><title/><link>https://renyunkang.tk/install-KubeOVN/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/install-KubeOVN/</guid><description>#kube-ovn #kubekey #install
overlay 安装 使用 kubekey 安装 1 2 3 4 5 6 7 8 9 10 11 apiVersion:kubekey.</description></item><item><title/><link>https://renyunkang.tk/iptables-%E8%BD%AC%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/iptables-%E8%BD%AC%E5%8F%91/</guid><description>#iptables
端口转发 将本机的8080端口转发至其他主机，主机IP：192.168.1.12，目标主机IP和端口：192.168.1.13:8088，规则如下
1 2 3 4 iptables -t nat -A PREROUTING -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.</description></item><item><title/><link>https://renyunkang.tk/iptables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/iptables/</guid><description>#iptables #calico
用途：Calico 使用额外的 iptables 标记位来存储每个本地 Calico 端点的 ID。
calico 使用 iptables
与 service 有什么关系？
1 WhenusingCalicowithKubernetes&amp;#39; `kube-proxy` in IPVS mode, Calico uses additional iptables mark bits to store an ID for each local Calico endpoint.</description></item><item><title/><link>https://renyunkang.tk/IPV6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/IPV6/</guid><description>#ipv6 #calico
参考文档：
IPv4/IPv6 双协议栈 | Kubernetes Configure dual stack or IPv6 only | Calico Documentation (tigera.io) 配置 kubernetes kube-apiserver: --service-cluster-ip-range=&amp;lt;IPv4 CIDR&amp;gt;,&amp;lt;IPv6 CIDR&amp;gt; kube-controller-manager: --cluster-cidr=&amp;lt;IPv4 CIDR&amp;gt;,&amp;lt;IPv6 CIDR&amp;gt; --service-cluster-ip-range=&amp;lt;IPv4 CIDR&amp;gt;,&amp;lt;IPv6 CIDR&amp;gt; --node-cidr-mask-size-ipv4|--node-cidr-mask-size-ipv6 对于 IPv4 默认为 /24， 对于 IPv6 默认为 /64 kube-proxy: --cluster-cidr=&amp;lt;IPv4 CIDR&amp;gt;,&amp;lt;IPv6 CIDR&amp;gt; kubelet: 当没有 --cloud-provider 时，管理员可以通过 --node-ip 来传递逗号分隔的 IP 地址， 为该节点手动配置双栈 .</description></item><item><title/><link>https://renyunkang.tk/k9s-Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/k9s-Tools/</guid><description>#k9s
release url: Releases · derailed/k9s (github.com)
安装
配置： derailed/k9s: 🐶 Kubernetes CLI To Manage Your Clusters In Style! (github.com) ~/.</description></item><item><title/><link>https://renyunkang.tk/Kind-Tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Kind-Tools/</guid><description>#kind #install
文档： https://kind.sigs.k8s.io/docs/user/quick-start
安装二进制 1 2 3 curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.16.0/kind-linux-amd64 chmod +x ./kind sudo mv .</description></item><item><title/><link>https://renyunkang.tk/kube-ovn-ipam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kube-ovn-ipam/</guid><description>#ipam #kube-ovn
ip 分配 随机分配 对于工作负载的 ip 分配策略
优先使用负载指定的：ovn.kubernetes.io/logical_switch: subnet 如果负载没有指定使用，使用 namespace 绑定的 subnet 如果 namespace 没有绑定 subnet，使用安装默认的 ovn-default 静态分配 静态分配即在 pod 的 annotations 中添加对应的注解：如果 mac 地址为空，会随机申请出一个 mac 地址。</description></item><item><title/><link>https://renyunkang.tk/kube-ovn-networkpolicy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kube-ovn-networkpolicy/</guid><description>#network-policy #kube-ovn
标准的 NetworkPolicy kube-ovn 支持标准的 NetworkPolicy，但是无法作用于 node 上的策略
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 apiVersion:networking.</description></item><item><title/><link>https://renyunkang.tk/kube-ovn-overlay-vpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kube-ovn-overlay-vpc/</guid><description>#cni #kube-ovn #overlay
overlay 模式路由网络打通 Overlay 下路由方式网络打通 - Kube-OVN 文档
网关类型 仅在默认 vpc 下支持，子网管理
分布式网关 子网的默认类型网关，每个 node 会作为当前 node 上 pod 访问外部网络的网关。数据包会通过本机的 ovn0 网卡流入主机网络栈，再根据主机的路由规则进行出网。 当 natOutgoing 为 true 时，Pod 访问外部网络将会使用当前所在宿主机的 IP。</description></item><item><title/><link>https://renyunkang.tk/kube-ovn-underlay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kube-ovn-underlay/</guid><description>#kube-ovn #underlay
功能限制 由于该模式下容器网络直接使用物理网络进行二层包转发，Overlay 模式下的 SNAT/EIP， 分布式网关/集中式网关等 L3 功能无法使用。
使用 underlay 模式主要涉及的资源有：
资源 说明 provider-networks underlay 网卡提供者 vlans vlan 信息 subnets 子网/ippool 地址池 ips ip 分配记录 provider-networks 资源 ProviderNetwork 提供了主机网卡到物理网络映射的抽象，将同属一个网络的网卡进行统一管理， 并解决在复杂环境下同机器多网卡、网卡名不一致、对应 Underlay 网络不一致等情况下的配置问题。</description></item><item><title/><link>https://renyunkang.tk/kube-ovn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kube-ovn/</guid><description>#kube-ovn #cni
文档链接： Kube-OVN 文档 发布版本： Releases · kubeovn/kube-ovn (github.com)
kube-ovn 1.9 版本自定义资源
自定义资源 说明 备注 vpcs 自定义vpc vpc-nat-gateways vpc 出口网关 subnets 子网/ippool 地址池 provider-networks underlay 网卡提供者 vlans vlan 信息 ips ip 分配记录 htbqoses pod 网络限速 security-groups 安全组信息 kube-ovn 1.</description></item><item><title/><link>https://renyunkang.tk/kube-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kube-proxy/</guid><description>使用模式：ipvs or iptables
切换方式
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 ~#: kubectl -n kube-system edit cm kube-proxy apiVersion: v1 data: config.</description></item><item><title/><link>https://renyunkang.tk/kubeadm-install-k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kubeadm-install-k8s/</guid><description>#install #kubernetes #kubeadm
ubuntu 安装 kubernetes 1. 安装 docker 安装docker：
curl -sSL https://get.daocloud.io/docker | sh curl -fsSL https://get.docker.com | bash -s docker &amp;ndash;mirror Aliyun 2.</description></item><item><title/><link>https://renyunkang.tk/kubectl-ko/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kubectl-ko/</guid><description>#kube-ovn #kubectl
有时候安装完成 kube-ovn 之后，kubectl ko 插件无法使用</description></item><item><title/><link>https://renyunkang.tk/kubekey-install-k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/kubekey-install-k8s/</guid><description>#install #kubernetes #kubekey 下载 kubekey
1 2 export KKZONE=cn curl -sfL https://get-kk.kubesphere.io | VERSION=v2.3.0 sh - 生成配置文件</description></item><item><title/><link>https://renyunkang.tk/linux-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/linux-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid><description>#静态ip
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 root@node1:~# cat /etc/network/interfaces source /etc/network/interfaces.</description></item><item><title/><link>https://renyunkang.tk/markdown-style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/markdown-style/</guid><description>#markdown
Extended Syntax | Markdown Guide</description></item><item><title/><link>https://renyunkang.tk/MetalLB-vs-OpenELB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/MetalLB-vs-OpenELB/</guid><description>eip 的节点选择 eip 的 namespace 选择 service ip share 单点故障 部署架构 deployment：controller daemonSet：speaker 宣告路由
工作模式：
layer2 bgp + frr bfd bgp 模式为每个节点运行一个 bgp session</description></item><item><title/><link>https://renyunkang.tk/multipass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/multipass/</guid><description>#multipass
官方github： https://github.com/canonical/multipass windows 环境下的安装以及使用： https://multipass.run/docs/installing-on-windows
windows 支持以下两种模式：
Hyper-V：（只能是windows Pro 或者 windows 企业版） VirtualBox：依赖 VirtualBox 切换模式：
multipass set local.</description></item><item><title/><link>https://renyunkang.tk/multus-cni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/multus-cni/</guid><description>#cni #multus-cni
仓库地址： k8snetworkplumbingwg/multus-cni: A CNI meta-plugin for multi-homed pods in Kubernetes (github.com)
安装 kubectl apply-f https://github.com/k8snetworkplumbingwg/multus-cni/blob/v3.9.2/deployments/multus-daemonset-thick-plugin.yml
使用 创建 NetworkAttachmentDefinition 资源 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 cat &amp;lt;&amp;lt;EOF | kubectl create -f - apiVersion: &amp;#34;k8s.</description></item><item><title/><link>https://renyunkang.tk/network-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/network-tools/</guid><description>#nsenter
nsenter -u -n -t $pid bash
nsenter --uts --net --target 3326 --ipc --mount --pid
网卡队列设置为1 + 网卡终端绑定至 CPU0 [Linux 性能调优] 网卡中断与CPU的绑定问题 - 巴蛮子 - 博客园 (cnblogs.</description></item><item><title/><link>https://renyunkang.tk/networkPolicy-%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/networkPolicy-%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/</guid><description>网络策略 | Kubernetes</description></item><item><title/><link>https://renyunkang.tk/NewDesign-%E5%85%89%E5%A4%A7%E7%95%8C%E9%9D%A2%E5%AE%9A%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/NewDesign-%E5%85%89%E5%A4%A7%E7%95%8C%E9%9D%A2%E5%AE%9A%E5%88%B6/</guid><description>#kubesphere #ippool #calico #network #kube-ovn [[kube-ovn]]
已有 ippool 功能增强 集成 kube-ovn： ippool 功能增强 v3.3.x 之前的版本 ippool 只使用 calico 作为 provider，并且只支持一小部分功能，面对复杂的网络环境，用户只能在终端上进行修改，因此为支持更多环境的方便使用，增强以下功能：</description></item><item><title/><link>https://renyunkang.tk/Obsidian-%E6%8F%92%E4%BB%B6%E7%86%9F%E6%82%89/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Obsidian-%E6%8F%92%E4%BB%B6%E7%86%9F%E6%82%89/</guid><description> 图片放置笔记中 obsidian - mdnice 墨滴
绘图导入素材库</description></item><item><title/><link>https://renyunkang.tk/openelb-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/openelb-console/</guid><description>#openelb #console
server 部署 可以配置的端口：&amp;ndash;http-port: 8080
docker 访问： 生成编译镜像
生成 docker images 生成 default.conf docker run &amp;ndash;rm -d &amp;ndash;name=openelb-console -v /root/program/test/console/default.</description></item><item><title/><link>https://renyunkang.tk/openelb-install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/openelb-install/</guid><description>#openelb
修改默认的 443 端口
将对应 443 修改为其他想要暴露的端口，例如30000 在 validatingwebhookconfiguration 以及 mutatingwebhookconfiguration 中 webhooks.clientConfig.service 中添加 port: 30000</description></item><item><title/><link>https://renyunkang.tk/openelb-%E4%B8%8E-calico-%E5%86%B2%E7%AA%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/openelb-%E4%B8%8E-calico-%E5%86%B2%E7%AA%81/</guid><description>BGP 只允许每对节点建立一个会话。因此，如果 Calico 与 BGP 路由器建立了会话，openelb无法建立自己的会话——它将被 BGP 的冲突解决算法作为重复项拒绝。
calico 3.18 之后支持配置通过 bgp 宣告 LoadBalancer IPs。因此可以使用 openelb 时可以不建立 bgpconf 与 bgppeer 资源。</description></item><item><title/><link>https://renyunkang.tk/OriginalDesign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/OriginalDesign/</guid><description>#kubesphere #ippool #calico #network kubernetes 网络要求： 服务、负载均衡和联网 | Kubernetes
Pod 能够与所有其他节点上的 Pod 通信， 且不需要网络地址转译（NAT） 节点上的代理（比如：系统守护进程、kubelet）可以和节点上的所有 Pod 通信 pod 与 pod 通信 pod 与 service 通信 外部与 service 通信 自定义资源对照 现有功能 创建/删除 ippool（可同时创建多个） 将指定 ippool 分配到企业空间 为工作负载指定分配的 ippool 查看 ippool 详情（分配情况[企业空间/容器组/剩余 ip 数量/ ip 总数]、网段详情等） 资源对照 v3.</description></item><item><title/><link>https://renyunkang.tk/pbft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/pbft/</guid><description>镜像： 1.2.0
hyperledger/fabric-peer hyperledger/fabric-orderer hyperledger/fabric-ca hyperledger/fabric-tools hyperledger/fabric-ccenv 0.4.10 hyperledger/fabric-baseimage hyperledger/fabric-baseos hyperledger/fabric-couchdb docker ps
ca.trace.com - hyperledger/fabric-ca orderer.trace.com - hyperledger/fabric-ordere peer0.</description></item><item><title/><link>https://renyunkang.tk/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/perf-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid><description>#iperf #network
Wiki - Linux 效能分析工具: Perf (ncku.edu.tw) 网络测试工具 一、iperf iperf是一个网络性能测试工具。iperf可以测试TCP和UDP带宽质量。iperf可以测量最大TCP带宽，具有多种参数和UDP特性。iperf可以报告带宽，延迟抖动和数据包丢失。利用iperf这一特性，可以用来测试一些网络设备如路由器，防火墙，交换机等的性能。
服务端10.74.148.74启动iperf3，监听端口12345，请求间断时间1s ~# iperf3 -s -p 12345 -i 1 客户端向10.</description></item><item><title/><link>https://renyunkang.tk/PortAllocator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/PortAllocator/</guid><description>webhook 操作：
分配端口 释放端口 controller-manager 操作：
同步 pod 分配信息 同步 ns 开关信息 同步 configmap 配置信息 http server 操作 - 可以更换为命令行操作</description></item><item><title/><link>https://renyunkang.tk/Prometheus-Blockbox-Exporter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Prometheus-Blockbox-Exporter/</guid><description>Blackbox Exporter 是 Prometheus 社区提供的 官方黑盒监控解决方案,其允许用户通过: http\HTTPS\DNS\TCP\ICMP\gRPC的方式对网络进行探测.
安装部署
docker 安装
1 docker run --rm -p 9115:9115 --name blackbox_exporter -v $(pwd):/config quay.</description></item><item><title/><link>https://renyunkang.tk/Question/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/Question/</guid><description>layer3+4 与 layer2+3</description></item><item><title/><link>https://renyunkang.tk/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/README/</guid><description>Obsidian 社区插件下载修复 因为某些原因，在国内经常无法下载 Obsidian 的社区插件。这个项目的主要目的就是修复这种情况，让国内的用户也可以无障碍的下载社区插件。
[![Contributors][contributors-shield]][contributors-url] [![Forks][forks-shield]][forks-url] [![Stargazers][stars-shield]][stars-url] [![Issues][issues-shield]][issues-url] [![MIT License][license-shield]][license-url] [![LinkedIn][linkedin-shield]][linkedin-url]
目录 上手指南 文件目录说明 作者 版权说明 鸣谢 上手指南 下载 obsidian-proxy-github.</description></item><item><title/><link>https://renyunkang.tk/root-%E6%89%8B%E6%9C%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/root-%E6%89%8B%E6%9C%BA/</guid><description>参考了这个操作了一下 没有成功： 真我\OPPO 解锁BL、ROOT教程 - 知乎 (zhihu.com)
adb 连接手机
手机开启 usb 调试 连接手机并允许调试 之后 使用 adb devices shell 连接：adb connect ip (查看手机 ip 地址) 无奈花了 35 让人家线刷 root 了</description></item><item><title/><link>https://renyunkang.tk/RSS-RPS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/RSS-RPS/</guid><description>单队列没有问题，多队列有问题 ebpf
网卡多队列 多核 多CPU RSS RPS RFS
由于这块内存区域是有限的，如果数据包的速率非常快，单个 CPU 来不及取走这些包，新来的包就会被丢弃。这时候，Receive Side Scaling（RSS，接收端扩展）或者多队列（multiqueue）一类的技术可能就会排上用场。
可以把软中断系统想象成一系列内核线程（每个 CPU 一个），这些线程执行针对不同事件注册的处理函数（handler）。如果你执行过 top 命令，可能会注意到ksoftirqd/0 这个内核线程，其表示这个软中断线程跑在 CPU 0 上。</description></item><item><title/><link>https://renyunkang.tk/runtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/runtime/</guid><description>crio
1 #### 1. 安装cri-o yum install git make curl -OL https://github.com/cri-o/cri-o/releases/download/v1.18.4/crio-v1.18.4.tar.gz tar -zxf crio-v1.18.4.tar.gz cd crio-v1.18.4 mkdir -p /etc/crio /opt/cni/bin /usr/local/share/oci-umount/oci-umount.</description></item><item><title/><link>https://renyunkang.tk/shell-%E5%B8%B8%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/shell-%E5%B8%B8%E7%94%A8/</guid><description>#shell
移动光标 ctrl+a**: 移到行首（a是首字母）**
ctrl+e**: 移到行尾（end）**
ctrl+b: 前移一个字符(backward)
ctrl+f: 后移一个字符(forward)
alt+b: 前移一个单词</description></item><item><title/><link>https://renyunkang.tk/ss-%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/ss-%E5%91%BD%E4%BB%A4/</guid><description>#network #tool
ss 命令用于显示socket状态. 他可以显示PACKET sockets, TCP sockets, UDP sockets, DCCP sockets, RAW sockets, Unix domain sockets等等统计. 它比其他工具展示等多tcp和state信息. 它是一个非常实用、快速、有效的跟踪IP连接和sockets的新工具.
功能类似：netstat</description></item><item><title/><link>https://renyunkang.tk/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/ssh/</guid><description>#ssh
1 2 3 4 5 WARNING: UNPROTECTED PRIVATE KEY FILE! Permissions 0777 for &amp;#39;/root/.ssh/id_rsa&amp;#39; are too open. It is recommended that your private key files are NOT accessible by others.</description></item><item><title/><link>https://renyunkang.tk/subnet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/subnet/</guid><description>| 字段 | 选项 | 说明 |= |&amp;ndash;|&amp;ndash;|&amp;ndash;| | 名字 | 必填 | subnet 名称 | | CIDR | 必填 | subnet cidr | | 网关 | 可选 | 没有指定时会使用 CIDR 的第一个地址 | | 逻辑网关 | 可选 | 对于物理网络不存在网关的情况，可以指定逻辑网关 | | vlan | 可选 | 子网的 vlan tag，未指定或者为0时，表示不带有 tag | | provider | 可选 | 绑定底层网卡 |</description></item><item><title/><link>https://renyunkang.tk/tc-tbf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/tc-tbf/</guid><description>tbf - token bucket Filter 令牌桶过滤器
tbf sfq 无类算法 流量控制 TBF 队列控制 SFQ 随机公平队列
分类算法：PRIO/CBQ/HTB 对多种数据流区别对待
PRIO：分类优先算法 (从左至右优先发包), 队列规定并不进行整形，它仅仅根据配置的过滤器把流量进一步细分 CBQ：工作机制是确认链路的闲置时间足够长，以达到降低链路实际带宽的目的 HTB：分层的令牌桶一个分类的令牌桶过滤器 linux 流量控制：</description></item><item><title/><link>https://renyunkang.tk/tcpdump/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/tcpdump/</guid><description>tcpdump -i any -w mycap.pacp</description></item><item><title/><link>https://renyunkang.tk/termshark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/termshark/</guid><description>#wireshark #tcpdump #termshark
安装： Releases · gcla/termshark (github.com)</description></item><item><title/><link>https://renyunkang.tk/TODO-other/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/TODO-other/</guid><description>#todo
博客搭建
OneNote 迁移 + 导出 pdf/html + pdf 转 html + 博客
笔记迁移 - onenote + 语雀</description></item><item><title/><link>https://renyunkang.tk/TODO/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/TODO/</guid><description>#todo
cni 调研
阿里 - hybridnet - CNStack 网络插件：hybridnet 的设计与实现 daocloud - spiderpool SpiderPool - 云原生容器网络 IPAM 插件 calico 整体的流程 + iptables 数据面 1.</description></item><item><title/><link>https://renyunkang.tk/use-kube-ovn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/use-kube-ovn/</guid><description>#kube-ovn #cni #how-to-use
核心资源 subnet
示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 apiVersion:kubeovn.</description></item><item><title/><link>https://renyunkang.tk/vlan-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/vlan-%E9%85%8D%E7%BD%AE/</guid><description>#vlan #vyos
[[hybridnet 网络插件]]
1 2 3 4 5 6 7 set interfaces ethernet eth1 vif 100 description &amp;#39;VLAN 100&amp;#39; set interfaces ethernet eth1 vif 100 address &amp;#39;192.</description></item><item><title/><link>https://renyunkang.tk/vyos-OSPF-%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/vyos-OSPF-%E9%85%8D%E7%BD%AE/</guid><description>#vyos #路由器
1 2 3 4 5 6 set interfaces loopback lo address 9.9.9.9/32 set protocols ospf parameters router-id 8.</description></item><item><title/><link>https://renyunkang.tk/webhook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/webhook/</guid><description>#webhook
动态准入控制插件
MutatingWebhookConfiguration ValidatingWebhookConfiguration k8s webhook准入控制插件源码级别理解-注入sidecar - 知乎 (zhihu.com)
openelb webhook 使用 kube-webhook-certgen port-allocator webhook 使用 cert-manager</description></item><item><title/><link>https://renyunkang.tk/wireshark-%E6%8A%93%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/wireshark-%E6%8A%93%E5%8C%85/</guid><description>#wireshark #抓包
wireshark 抓远程 ubuntu 的包 安装 rpcapd rpcapd 是一个为 Windows 版本的Wireshark协议分析器提供远程流量捕获的守护进程。它随Windows 的 WinPcap 网络捕获库一起提供，之前 Linux 中的没有 libpcap ,后来添加了。 使用 rpcapd-linux 使用 the-tcpdump-group/libpcap 【推荐】没有大的报错问题 1 2 3 4 5 6 apt-get build-dep libpcap -y git clone https://github.</description></item><item><title/><link>https://renyunkang.tk/wireshark-%E6%8A%93%E5%8C%85%E8%BF%87%E6%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/wireshark-%E6%8A%93%E5%8C%85%E8%BF%87%E6%BB%A4/</guid><description>#wireshark
功能 表达式 筛选特定 ip ip.addr == xxx</description></item><item><title/><link>https://renyunkang.tk/%E4%B8%B4%E6%97%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E4%B8%B4%E6%97%B6/</guid><description>[[Obs＃67] upgit－使用GitHub圖床：快速上傳圖檔到GitHub並插入圖片網址到Obsidian – 簡睿隨筆 (jdev.tw)](http://jdev.tw/blog/6982) 华为 centos 源： wget -O /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-8-reg.repo
ipv6 ip -6 route add default via 2402:e7c0:1c0:3000::1</description></item><item><title/><link>https://renyunkang.tk/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9B%B8%E5%85%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9B%B8%E5%85%B3/</guid><description>#containerlab #交换机
Nokia SR Linux
1 2 3 4 5 # access CLI docker exec -it &amp;lt;name&amp;gt; sr_cli # access bash docker exec -it &amp;lt;name&amp;gt; bash Arista cEOS</description></item><item><title/><link>https://renyunkang.tk/%E4%BD%BF%E7%94%A8-containerlab-+-kind-%E6%90%AD%E5%BB%BA-calico-tor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E4%BD%BF%E7%94%A8-containerlab-+-kind-%E6%90%AD%E5%BB%BA-calico-tor/</guid><description>#containerlab #calico #kind #bgp
1. 使用 kind 创建 node 节点 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 kind:Clustername:clusterapiVersion:kind.</description></item><item><title/><link>https://renyunkang.tk/%E4%BD%BF%E7%94%A8code-generator%E7%94%9F%E6%88%90crd%E7%9A%84clientsetinformerlisters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E4%BD%BF%E7%94%A8code-generator%E7%94%9F%E6%88%90crd%E7%9A%84clientsetinformerlisters/</guid><description>#code-generator #informer #kubernetes #kubebuilder
参考链接： 使用code-generator生成crd的clientset、informer、listers - 赶路人的博客 (xieys.club)</description></item><item><title/><link>https://renyunkang.tk/%E5%85%89%E5%A4%A7-calico-bgp-%E6%96%AD%E8%81%94%E5%8E%9F%E5%9B%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%85%89%E5%A4%A7-calico-bgp-%E6%96%AD%E8%81%94%E5%8E%9F%E5%9B%A0/</guid><description>背景 + 分析 行内在进行 http 短连接性能测试时，calico 意外重启，而 calico 重启导致了节点与交换机 bgp 断连，触发行内交换机监控告警。 重启时查看之前容器日志发现并没有明显的错误日志，查看系统日志发现同一时间段 kubelet 探针超时失败，并且也有其他 pod 发生重启的日志。 由于是针对与网络的测试，所有分析并提出以下解决方案： 排查路由数量 对于路由聚合
交换机侧：先讨论交换机上可行性，但因为两会期间，行内封网无法进行交换机配置的改动，没有进行尝试 bird 配置：临时修改了 calico bird 配置（进入 docker merge 读写层修改 bird 配置文件，并手动创建/删除 ippool，让 confd 重新刷新配置并生效，注意重启 calico 后，bird 配置会复原），让其只导入集群相关的路由，将路由数量由5600多减少到 100 左右。 减少路由后测试，calico 仍然会触发重启，排除路由数量的因素。</description></item><item><title/><link>https://renyunkang.tk/%E5%85%89%E5%A4%A7%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%85%89%E5%A4%A7%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid><description>bgp 相关问题 1. bgp 断联的原因分析
- 尝试路由聚合
- 交换机聚合
- calico 能否过滤自己想要的路由
2. calico 回环路由 3. calico iptables 数量多，调研能否关闭
4. tor 模式下 bgp 报文</description></item><item><title/><link>https://renyunkang.tk/%E5%85%AC%E6%9C%89%E4%BA%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%85%AC%E6%9C%89%E4%BA%91/</guid><description>https://cwiki.yunify.com/pages/viewpage.action?pageId=23659614&amp;src=contextnavpagetreemode
https://cwiki.yunify.com/pages/viewpage.action?pageId=96318071&amp;src=contextnavpagetreemode
yunify/qingcloud-cloud-controller-manager: A kubernetes cloud-controller-manager for the qingcloud (github.com)</description></item><item><title/><link>https://renyunkang.tk/%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/</guid><description>ipvs warn 关闭 sysctl -w net.ipv4.vs.ignore_no_rs_error=1 IPVS no destination available - Kubernetes 实践指南 (imroc.cc)</description></item><item><title/><link>https://renyunkang.tk/%E5%86%85%E6%A0%B8%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%86%85%E6%A0%B8%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</guid><description/></item><item><title/><link>https://renyunkang.tk/%E5%89%96%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%89%96%E6%9E%90/</guid><description>Calico eBPF Data Plane Deep-Dive (tigera.io)
nodeport 流量到来之后如何处理的
host ip update ？
kube-proxy ： 用于处理高级的问题，如重启、配置等</description></item><item><title/><link>https://renyunkang.tk/%E5%8F%8C%E6%A0%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%8F%8C%E6%A0%88/</guid><description>kubekey 开发需求 检测主机是否支持 ipv6 修正 ipv6 相关的内核参数 支持开启 ipv6 以及 ipv6 的配置项（编辑 cni 配置文件） 安装 calico 并开启 ipv6 （添加 calico-node daemonset 的 ipv6 相关的环境变量） 配置 ipv6 (添加默认的 ipv6 ippool) 初始化 kubernetes 需要开启 ipv6 (使用 kubeadm 配置 kube-apiserver、kube-controller-manager、kube-proxy、kubelet 来开启 ipv6) ks 内部组件开发需求 ks 内部组件 ippool 支持 ipv6</description></item><item><title/><link>https://renyunkang.tk/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>#calico #cni #calicoctl
官网 About Calico (tigera.io)
安装 calico calicoctl 使用calicoctl 可以使用calico 的更多的功能，calicoctl 用于管理 Calico 策略和配置，以及查看详细的集群状态。
API groups 所有 Kubernetes 资源都属于一个 API 组。 API 组由资源的 apiVersion 指定。Calico 使用 projectcalico.</description></item><item><title/><link>https://renyunkang.tk/%E5%A4%9A%E7%BD%91%E5%8D%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%A4%9A%E7%BD%91%E5%8D%A1/</guid><description>创建 nad
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat &amp;lt;&amp;lt;EOF | kubectl create -f -apiVersion:&amp;#34;k8s.</description></item><item><title/><link>https://renyunkang.tk/%E5%AE%89%E8%A3%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%AE%89%E8%A3%85/</guid><description>#metallb
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 root@node3:~/metallb# kubectl apply -f https://raw.</description></item><item><title/><link>https://renyunkang.tk/%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/</guid><description>#tool #linux #network
工具包 [[工具包 - 下载命令]] ebpf 相关 [[ebpf 排查工具]] iptables 相关 [[iptables 转发]] conntrack/netstats/ss/lsof [[conntrack]] 网卡多队列、中断绑定 [[网卡多队列 + 中断绑定]]</description></item><item><title/><link>https://renyunkang.tk/%E5%B7%A5%E5%85%B7%E5%8C%85-%E4%B8%8B%E8%BD%BD%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%B7%A5%E5%85%B7%E5%8C%85-%E4%B8%8B%E8%BD%BD%E5%91%BD%E4%BB%A4/</guid><description>相关网络工具包：
ping包：apt-get install inetutils-ping ifconfig/netstat：apt-get install net-tools ip 命令：apt-get install iproute2 抓包：sudo apt-get install wireshark + sudo usermod -a -G wireshark $USER</description></item><item><title/><link>https://renyunkang.tk/%E5%B8%A6%E5%AE%BD%E9%99%90%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%B8%A6%E5%AE%BD%E9%99%90%E5%88%B6/</guid><description>#bandwidth
CNI-bandwidth
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { &amp;#34;cniVersion&amp;#34;: &amp;#34;0.</description></item><item><title/><link>https://renyunkang.tk/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</guid><description>#开机自启 #linux
最简单的方法是使用 rc.local 实现开机自启，不过由于系统版本更替，很多新版本都没有 rc.local 文件了，需要手动设置 添加 /etc/rc.local 文件
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/rc.</description></item><item><title/><link>https://renyunkang.tk/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA-netns-+-%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA-netns-+-%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1/</guid><description>#network #netns
使用 arp-proxy，并在主机上添加对应的路由联通 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward echo &amp;#39;net.</description></item><item><title/><link>https://renyunkang.tk/%E6%8A%98%E8%85%BE%E5%B0%8F%E7%88%B1%E5%90%8C%E5%AD%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%8A%98%E8%85%BE%E5%B0%8F%E7%88%B1%E5%90%8C%E5%AD%A6/</guid><description> 使用小米账号获取小爱同学的 did yihong0618/MiService: XiaoMi Cloud Service for mi.com (github.com) 登录</description></item><item><title/><link>https://renyunkang.tk/%E6%8E%92%E6%9F%A5-calico-ebpf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%8E%92%E6%9F%A5-calico-ebpf/</guid><description>#calico #ebpf
配置 kube-proxy
1 2 3 4 5 kubectl patch ds -n kube-system kube-proxy -p &amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;template&amp;#34;:{&amp;#34;spec&amp;#34;:{&amp;#34;nodeSelector&amp;#34;:{&amp;#34;non-calico&amp;#34;: &amp;#34;true&amp;#34;}}}}}&amp;#39; kubectl patch felixconfiguration default --type merge --patch=&amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;bpfEnabled&amp;#34;: true}}&amp;#39; # 如果无法禁用 kube-proxy ，配置 Felix kubectl patch felixconfiguration default --type merge --patch=&amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;bpfKubeProxyIptablesCleanupEnabled&amp;#34;: false}}&amp;#39; 取消设置 - 回滚</description></item><item><title/><link>https://renyunkang.tk/%E6%90%AD%E5%BB%BA%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%90%AD%E5%BB%BA%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD/</guid><description>quartz + obsidian-export(添加.export-ignore)+github jackyzha0/quartz: 🌱 host your own second brain and digital garden for free (github.com) oldwinter/knowledge-garden: 我的第二大脑 second brain，我的数字花园 digital garden，用obsidian双链笔记软件写作而成 (github.</description></item><item><title/><link>https://renyunkang.tk/%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%97%A5%E5%BF%97/</guid><description>#calico #calico-log
calico 日志 calico 主要运行组件为：calico-node 以及 calico-kube-controller-manager
calico-node 主要有 felix、bird、cni 对于 kube-controller-manager 日志没有特殊配置 node 实例的日志： kubectl logs -n kube-system calico-node-xxxx</description></item><item><title/><link>https://renyunkang.tk/%E6%97%B6%E5%8C%BA-%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%97%B6%E5%8C%BA-%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4/</guid><description>查看系统时区 timedatectl
修改系统时区 1 2 3 4 timedatectl list-timezones | grep -i shang Asia/Shanghai timedatectl set-timezone Asia/Shanghai 软连接修改时区 1 2 3 4 5 ```shell root@node1:~#ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime root@node1:~# ls -l /etc/localtime lrwxrwxrwx 1 root root 33 May 20 2022 /etc/localtime -&amp;gt; /usr/share/zoneinfo/Asia/Shanghai</description></item><item><title/><link>https://renyunkang.tk/%E6%9C%AA%E5%91%BD%E5%90%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%9C%AA%E5%91%BD%E5%90%8D/</guid><description>现象： 短连接性能测试时 calico-node 存活探针超时，并同一时间存在同一节点存在其他 pod 超时死亡的情况
可能的原因：
主机上的路由太多，在高并发的情况下，内核主要时间用于检索路由，导致探针超时 calico-node 存活探针可能会向其他 node 探测 bgp 的联通性，大并发的情况下，网络存在拥堵，导致探测超时 大并发的情况下 node 处理性能差，calico-node 存活探针超时 尝试解决办法：</description></item><item><title/><link>https://renyunkang.tk/%E6%9F%A5%E7%9C%8B-CPU%E5%86%85%E5%AD%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%9F%A5%E7%9C%8B-CPU%E5%86%85%E5%AD%98/</guid><description>查看 cpu 信息： cat /proc/cpuinfo
1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 总核数 = 物理CPU个数 X 每颗物理CPU的核数 # 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数 # 查看物理CPU个数 cat /proc/cpuinfo| grep &amp;#34;physical id&amp;#34;| sort| uniq| wc -l # 查看每个物理CPU中core的个数(即核数) cat /proc/cpuinfo| grep &amp;#34;cpu cores&amp;#34;| uniq # 查看逻辑CPU的个数 cat /proc/cpuinfo| grep &amp;#34;processor&amp;#34;| wc -l # 查看CPU信息（型号） cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 查看 mem 信息： cat /proc/meminfo</description></item><item><title/><link>https://renyunkang.tk/%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</guid><description>#blockbox #exporter #prometheus
简单介绍 Blackbox Exporter 是 Prometheus 社区提供的 官方黑盒监控解决方案,其允许用户通过: http\HTTPS\DNS\TCP\ICMP\gRPC的方式对网络进行探测.
支持的协议：HTTP, HTTPS, DNS, TCP, ICMP, gRPC.
各个模块的配置： blackbox_exporter/CONFIGURATION.md at master · prometheus/blackbox_exporter (github.</description></item><item><title/><link>https://renyunkang.tk/%E6%B5%81%E9%87%8F%E8%B5%B0%E5%90%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E6%B5%81%E9%87%8F%E8%B5%B0%E5%90%91/</guid><description/></item><item><title/><link>https://renyunkang.tk/%E7%9B%91%E6%8E%A7-monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E7%9B%91%E6%8E%A7-monitor/</guid><description>#calico-monitor
Monitor Calico component metrics (tigera.io)
Configure Calico to enable the metrics reporting. Create the namespace and service account that Prometheus will need.</description></item><item><title/><link>https://renyunkang.tk/%E7%9B%91%E6%8E%A7%E6%96%87%E6%A1%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E7%9B%91%E6%8E%A7%E6%96%87%E6%A1%A3/</guid><description>calicoctl node 作用： calicoctl node run：运行 calico-node 镜像 calicoctl node status： calico-node 的一些状态信息 calicoctl node diags：为 Calico 节点收集诊断包 calicoctl node checksystem：检测该节点能否运行 calico-node 缺陷： 只能获取本节点的信息</description></item><item><title/><link>https://renyunkang.tk/%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E7%BB%84%E4%BB%B6/</guid><description>calico-node calico-controller
健康检查
ready live calico-node 容器以runit 作为进程管理工具，运行多个进程
进程树 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 Jul28 ?</description></item><item><title/><link>https://renyunkang.tk/%E7%BB%84%E7%BD%91.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E7%BB%84%E7%BD%91.excalidraw/</guid><description>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==
Text Elements 45.120.216.46 ^ZNmnY1tc
192.168.0.1 ^8cHK23kk</description></item><item><title/><link>https://renyunkang.tk/%E7%BD%91%E5%8D%A1-vlan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E7%BD%91%E5%8D%A1-vlan/</guid><description>#vlan #network
添加 vlan 子接口 使用 ip 命令 ip link add link enp125s0f0 name enp125s0f0.100 type vlan id 100 使用 vconfig 命令 相关模块 lsmod |grep -i 8021q 相关工具包 apt-get install vlan or yum install vconfig modprobe 8021q 添加 vlan vconfig add enp8s0f1 100 在enp8s0f1接口上配置两个VLAN vconfig set_flag enp8s0f1.</description></item><item><title/><link>https://renyunkang.tk/%E7%BD%91%E5%8D%A1%E5%A4%9A%E9%98%9F%E5%88%97-+-%E4%B8%AD%E6%96%AD%E7%BB%91%E5%AE%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E7%BD%91%E5%8D%A1%E5%A4%9A%E9%98%9F%E5%88%97-+-%E4%B8%AD%E6%96%AD%E7%BB%91%E5%AE%9A/</guid><description>#网卡多队列 #network #irqbalance
单CPU处理网络IO存在瓶颈, 目前经常使用网卡多队列提高性能.
通常情况下, 每张网卡有一个队列(queue), 所有收到的包从这个队列入, 内核从这个队列里取数据处理. 该队列其实是ring buffer(环形队列), 内核如果取数据不及时, 则会存在丢包的情况.
一个CPU处理一个队列的数据, 这个叫中断. 默认是cpu0(第一个CPU)处理. 一旦流量特别大, 这个CPU负载很高, 性能存在瓶颈. 所以网卡开发了多队列功能, 即一个网卡有多个队列, 收到的包根据TCP四元组信息hash后放入其中一个队列, 后面该链接的所有包都放入该队列.</description></item><item><title/><link>https://renyunkang.tk/%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</guid><description>google/cadvisor: Analyzes resource usage and performance characteristics of running containers. (github.com) 网络资源的使用率
yingyan003/netChecker: netChecker是一个检查k8s集群网络连通性的工具。测试对象是pod-&amp;gt;pod，pod-&amp;gt;node，pod-&amp;gt;svc的网络状况 (github.</description></item><item><title/><link>https://renyunkang.tk/%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</guid><description>#kubernetes #tools
安装 bash-completion 应用 kubectl 的 completion 1 2 source &amp;lt;(kubectl completion bash) echo &amp;#34;source &amp;lt;(kubectl completion bash)&amp;#34; &amp;gt;&amp;gt; ~/.</description></item><item><title/><link>https://renyunkang.tk/%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B/</guid><description>#spider-pool #cni
没有默认路由 导致无法连接 kubernetes.default</description></item><item><title/><link>https://renyunkang.tk/%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8%E7%9A%84%E5%8F%8D%E5%B0%84%E8%A7%84%E5%88%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E8%B7%AF%E7%94%B1%E5%8F%8D%E5%B0%84%E5%99%A8%E7%9A%84%E5%8F%8D%E5%B0%84%E8%A7%84%E5%88%99/</guid><description>#bgp #route-reflector
路由反射器的反射规则：
1、反射器接收到EBGP邻居通告的BGP路由时候：当路由反射器接收到来自EBGP邻居通告的BGP路由，会把此路由同时通告给同一cluster内的client邻居，也通告给cluster之外的其他IBGP邻居。而路由中携带的Cluster list和Originator属性只发送给cluster内的client邻居。
2、反射器接收到cluster内的IBGP邻居发送来的路由时候：当路由反射器接收到同一cluster内的IBGP邻居发送来的BGP路由时候，反射器把该路由通告给cluster内其他所有client邻居，也通告给cluster外的其他IBGP邻居，这个通告的路由包括了Originator 属性和修改后的Cluster ID属性。如果该反射器存在EBGP邻居的话，反射器同时把该路由通告给所有的EBGP邻居，但不携带任何反射器相关属性。
3、反射器接收到cluster外的其他IBGP邻居发送的BGP路由时候：当反射器接收到cluster以外的其他IBGP邻居发送的路由时候，反射器会把该路由通告给自己cluster内所有的client邻居，添加合适的属性。如果该RR存在EBGP邻居的话，则RR同时也把该路由通告给自己所有的EBGP邻居，但不携带反射器相关属性。</description></item><item><title/><link>https://renyunkang.tk/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</guid><description>#kube-ovn
kube-ovn 实现跨主机通信的原理 在 泰山服务器、华为鲲鹏920cpu 的 arm
kubectl ko 命令不起作用 脚本会根据 pod 使用的镜像来筛选出对应的 pod 然后执行对应的命令，因此当命令无法使用时，尝试修改一下脚本中的 REGISTRY
组件</description></item><item><title/><link>https://renyunkang.tk/%E9%85%8D%E7%BD%AE-route-reflector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E9%85%8D%E7%BD%AE-route-reflector/</guid><description>#calico #rr
Configuring Route Reflectors in Calico (tigera.io)
选择一个节点作为 RR，设置 lable 以及 routeReflectorClusterID 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 apiVersion:projectcalico.</description></item><item><title/><link>https://renyunkang.tk/%E9%85%8D%E7%BD%AE-TOR/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E9%85%8D%E7%BD%AE-TOR/</guid><description>#calico #tor
配置其他节点连接到 RR 节点 1 2 3 4 5 6 7 apiVersion:projectcalico.org/v3kind:BGPPeermetadata:name:testspec:nodeSelector:all()peerSelector:has(routeReflector) 禁止 BGP FullMesh 1 2 3 4 5 6 7 8 apiVersion:projectcalico.</description></item><item><title/><link>https://renyunkang.tk/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>#calico #calico-config
confd /etc/calico/conf/config
修改 mtu kubectl edit configmap/calico-config -n kube-system
问题：
能否修改 confd 的配置，实现修改 calico bird 参数的目的</description></item><item><title/><link>https://renyunkang.tk/%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renyunkang.tk/%E9%97%AE%E9%A2%98/</guid><description>为什么引入网卡多队列。引入网卡多队列解决了什么问题，带来了什么其他问题 队列绑核 整个收/发包的流程是什么样的 1.网卡多队列 &amp;ndash; 收包多队列 +发包多队列 通常情况下, 每张网卡有一个队列(queue), 所有收到的包从这个队列入, 内核从这个队列里取数据处理. 该队列其实是ring buffer(环形队列), 内核如果取数据不及时, 则会存在丢包的情况.
一个CPU处理一个队列的数据, 这个叫中断. 默认是cpu0(第一个CPU)处理. 一旦流量特别大, 这个CPU负载很高, 性能存在瓶颈.</description></item></channel></rss>